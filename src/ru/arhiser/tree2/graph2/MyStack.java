package ru.arhiser.tree2.graph2;

/**
 * Класс реализующий структуру Стек.
 * Нужен для обхода в глубину.
 * Стек реализуем на массиве.
 */
public class MyStack {
    /**
     * Размер стека.
     */
    private int size = 10;

    /**
     * Поле хранящее то что находится на
     * поверхности стека.
     */
    private int top;

    /**
     * Массив, на нем реализуем стек.
     */
    private int[] array;

    /**
     * В конструкторе инициализирум
     * поля.
     * Если стек пустой, то top = -1
     */
    public MyStack() {
        array = new int[size];
        top = -1;
    }

    /**
     * Метод добавления в стек.
     *
     * @param v вершина.
     */
    public void push(int v) {
        /*первый инкремент смещат номер -1 на 0
         * и на позицию 0 записываем вершину*/
        array[++top] = v;
    }

    /**
     * Метод удаляющий и возвращающий элемент
     * из стека.
     *
     * @return удаляемый элемент (вершина).
     */
    public int pop() {
        /*берем элемент из ячейки массива и потом
         * уменьшаем индекс ячейки*/
        return array[top--];
    }

    /**
     * Метод возвращающий элемент
     * из стека, но не удаляет его,
     * т.е.просто показывает что лежит
     * на вершине стека.
     *
     * @return показываемый элемент (вершина).
     */
    public int peek() {
        /*просто берем элемент из ячейки массива*/
        return array[top];
    }

    /**
     * Метод, проверяющий пустой стек или нет.
     *
     * @return boolean result.
     */
    public boolean isEmpty() {
        return top == -1;
    }


}
